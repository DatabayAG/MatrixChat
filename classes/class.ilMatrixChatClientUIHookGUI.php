<?php

declare(strict_types=1);

/**
 * This file is part of ILIAS, a powerful learning management system
 * published by ILIAS open source e-Learning e.V.
 *
 * ILIAS is licensed with the GPL-3.0,
 * see https://www.gnu.org/licenses/gpl-3.0.en.html
 * You should have received a copy of said license along with the
 * source code, too.
 *
 * If this is not the case or you just want to try ILIAS, you'll find
 * us at:
 * https://www.ilias.de
 * https://github.com/ILIAS-eLearning
 *
 *********************************************************************/

require_once __DIR__ . '/../vendor/autoload.php';

use ILIAS\DI\Container;
use ILIAS\Plugin\MatrixChatClient\Libs\ControllerHandler\ControllerHandler;
use ILIAS\Plugin\MatrixChatClient\Controller\ChatCourseSettingsController;
use ILIAS\Plugin\MatrixChatClient\Controller\ChatClientController;
use ILIAS\Plugin\MatrixChatClient\Repository\CourseSettingsRepository;

/**
 * Class ilMatrixChatClientUIHookGUI
 *
 * @ilCtrl_isCalledBy ilMatrixChatClientUIHookGUI: ilUIPluginRouterGUI
 */
class ilMatrixChatClientUIHookGUI extends ilUIHookPluginGUI
{
    /**
     * @var ilMatrixChatClientPlugin
     */
    private $plugin;
    /**
     * @var Container
     */
    private $dic;
    /**
     * @var ilCtrl
     */
    private $ctrl;
    /**
     * @var ControllerHandler
     */
    private $controllerHandler;

    public function __construct()
    {
        $this->plugin = ilMatrixChatClientPlugin::getInstance();
        $this->dic = $this->plugin->dic;
        $this->ctrl = $this->dic->ctrl();
        $this->controllerHandler = new ControllerHandler($this->plugin);
    }

    public function modifyGUI($a_comp, $a_part, $a_par = array())
    {
        if ($a_part !== "sub_tabs") {
            return;
        }

        /**
         * @var ilTabsGUI $tabs
         */
        $tabs = $a_par["tabs"];

        if (!$tabs->hasTabs()) {
            return;
        }

        global $DIC;

        $this->injectChatIntegrationTab($DIC);
        $this->injectChatIntegrationConfigTab($DIC);

        parent::modifyGUI($a_comp, $a_part, $a_par); // TODO: Change the autogenerated stub
    }

    public function getHTML($a_comp, $a_part, $a_par = []) : array
    {
        $tplId = $a_par["tpl_id"];
        $html = $a_par["html"];

        if (!$tplId || !$html) {
            return $this->uiHookResponse();
        }

        return $this->uiHookResponse();
    }

    public function executeCommand() : void
    {
        $this->controllerHandler->handleCommand($this->plugin->dic->ctrl()->getCmd());
    }

    private function injectChatIntegrationTab(Container $dic) : void
    {
        $tabs = $dic->tabs();
        $query = $dic->http()->request()->getQueryParams();

        if (
            $tabs->getActiveTab() !== "view_content"
            || !isset($query["cmdClass"], $query["baseClass"])
            || !in_array($query["cmdClass"], [
                ilObjCourseGUI::class,
                ilRepositoryGUI::class,
                strtolower(ilObjCourseGUI::class),
                strtolower(ilRepositoryGUI::class),
            ], true)
            || !in_array($query["baseClass"], [
                ilRepositoryGUI::class,
                strtolower(ilRepositoryGUI::class)
            ], true)
        ) {
            return;
        }

        $courseSettings = CourseSettingsRepository::getInstance($this->dic->database())->read((int) $query["ref_id"]);

        if ($this->plugin->matrixApi->general->serverReachable() && $courseSettings && $courseSettings->isChatIntegrationEnabled()) {
            $dic->ctrl()->setParameterByClass(self::class, "ref_id", (int) $query["ref_id"]);
            $tabs->addSubTab(
                "matrix-chat",
                $this->plugin->txt("chat"),
                $dic->ctrl()->getLinkTargetByClass([
                    ilUIPluginRouterGUI::class,
                    self::class,
                ], ChatClientController::getCommand("showChat"))
            );
        }
    }

    private function injectChatIntegrationConfigTab(Container $dic) : void
    {
        $tabs = $dic->tabs();
        $query = $dic->http()->request()->getQueryParams();
        if (
            $tabs->getActiveTab() !== "settings"
            || !isset($query["cmdClass"], $query["baseClass"])
            || $query["cmdClass"] !== strtolower(ilObjCourseGUI::class)
            || !in_array($query["baseClass"], [
                ilRepositoryGUI::class,
                strtolower(ilRepositoryGUI::class)
            ], true)
        ) {
            return;
        }

        if (!isset($query["ref_id"]) || !$query["ref_id"]) {
            ilUtil::sendFailure($this->plugin->txt("general.plugin.requiredParameterMissing"), true);
            $this->plugin->redirectToHome();
        }

        $dic->ctrl()->setParameterByClass(self::class, "ref_id", (int) $query["ref_id"]);

        if ($this->plugin->matrixApi->general->serverReachable()) {
            $tabs->addSubTab(
                "matrix-chat-course-settings",
                $this->plugin->txt("matrix.chat.course.settings"),
                $dic->ctrl()->getLinkTargetByClass([
                    ilUIPluginRouterGUI::class,
                    self::class,
                ], ChatCourseSettingsController::getCommand("showSettings"))
            );
        }
    }

    /**
     * Returns the array used to replace the html content
     *
     * @param string $mode
     * @param string $html
     * @return string[]
     */
    protected function uiHookResponse(string $mode = ilUIHookPluginGUI::KEEP, string $html = "") : array
    {
        return ['mode' => $mode, 'html' => $html];
    }
}
